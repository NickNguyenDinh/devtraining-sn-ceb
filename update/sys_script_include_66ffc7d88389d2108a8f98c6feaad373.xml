<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_58872_needit.TimeLimitUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Dynamically returns array of users currently in Temp VIP status</description>
        <name>TimeLimitUtils</name>
        <script><![CDATA[var TimeLimitUtils = Class.create();
TimeLimitUtils.prototype = {
    initialize: function() {
    },
	//Summary: Returns array of all active UserID's currently in Time-Limited Permission Table.
	//Args: string[] roleID: Collection of role names to filter for. Default is null. If null, returns all visible roles in Time-Limited Permission Table
	//Returns: Returns array of UserIDs. If no ID is applicable, an empty array is returned.
	HasTimeLimitedRole: function(role) {
		var roleID = [];
		if (role && role.length>0) {
			//Switch names to sys_ID by consulting sys_user_role
			var usr = new GlideRecord('sys_user_role');
			var c = usr.addQuery('name', role[0]);
			if (role.length > 1) {
				for (i = 1;i<role.length();i++) {
					c.addOrCondition('role',roleID[i]);
				}
			}
			
			usr.Query();
			while (usr.next()) {
				roleID.push(usr.getValue('sys_id'));
			}
			//Technically should error out if strings were provided that don't match any IDs.
			//But as this would be a tightly controlled function, this is not necessary.
		}		
		
		var gr = new GlideRecord('sys_user_has_role_time_limited');
		gr.addQuery('active', 'true');
		gr.addQuery('user.active', 'true');
		gr.addQuery('end_time','>=', new GlideDateTime().getLocalDate());
		if (roleID && roleID.length>0) {
			//Array of role was defined, only return if matching one in the list
			var cr = gr.addQuery('role', roleID[0]);
			if (roleID.length > 1) {
				for (i = 1;i<roleID.length();i++) {
					cr.addOrCondition('role',roleID[i]);
				}
			}
		}
		gr.query();

		var arr = [];
		while (gr.next()) {
			arr.push(gr.getValue('user'));
		}
		return arr;
	},
	
    type: 'TimeLimitUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-01 03:31:39</sys_created_on>
        <sys_id>66ffc7d88389d2108a8f98c6feaad373</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>TimeLimitUtils</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_script_include_66ffc7d88389d2108a8f98c6feaad373</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-02 18:19:22</sys_updated_on>
    </sys_script_include>
</record_update>
